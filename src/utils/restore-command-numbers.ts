import { AirtableService } from '../services/airtable.service';
import { db } from '../services/offline-db.service';

/**
 * Utilitaire pour restaurer les numéros de commande
 * À exécuter une seule fois depuis la console du navigateur
 */
export class CommandNumberRestorer {
    private airtableService: AirtableService;

    constructor(apiToken: string) {
        this.airtableService = new AirtableService(apiToken);
    }

    /**
     * Analyse les commandes et identifie celles dont le numéro a potentiellement été modifié
     */
    async analyzeCommandes() {
        // 1. Récupérer toutes les commandes dans Airtable
        const airtableCommandes = await this.airtableService.getCommandes();

        // 2. Récupérer les commandes en base locale (si disponibles)
        const localCommandes = await db.commandes.toArray();

        // 3. Créer une map des commandes locales par ID pour référence rapide
        const localCommandesMap = new Map(
            localCommandes.map(cmd => [cmd.id, cmd])
        );

        // 4. Analyser chaque commande
        const suspiciousCommandes = [];

        for (const commande of airtableCommandes) {
            // Les numéros de commande de 2024 ont probablement un format comme "CMD2024XXXXX"
            const is2024Command = commande.dates?.commande &&
                new Date(commande.dates.commande).getFullYear() === 2024;

            const hasAutogeneratedNumber = commande.numeroCommande?.startsWith('CMD') &&
                commande.numeroCommande.length >= 13; // Format probable CMD + timestamp

            // Si c'est une commande de 2024 avec un numéro qui semble autogénéré récemment
            if (is2024Command && hasAutogeneratedNumber) {
                // Vérifier si nous avons une version locale avec un numéro différent
                const localVersion = localCommandesMap.get(commande.id);

                if (localVersion && localVersion.numeroCommande !== commande.numeroCommande) {
                    suspiciousCommandes.push({
                        id: commande.id,
                        currentNumber: commande.numeroCommande,
                        possibleOriginalNumber: localVersion.numeroCommande,
                        creationDate: commande.dates?.commande,
                        shouldRestore: true
                    });
                } else {
                    // Si pas de version locale ou même numéro, quand même signaler comme suspect
                    suspiciousCommandes.push({
                        id: commande.id,
                        currentNumber: commande.numeroCommande,
                        possibleOriginalNumber: null,
                        creationDate: commande.dates?.commande,
                        shouldRestore: false // Ne pas restaurer automatiquement sans référence
                    });
                }
            }
        }

        console.table(suspiciousCommandes);
        return suspiciousCommandes;
    }

    /**
     * Restaure les numéros de commande identifiés
     */
    async restoreCommandNumbers(suspiciousCommandes: any[]) {
        const toRestore = suspiciousCommandes.filter(cmd => cmd.shouldRestore && cmd.possibleOriginalNumber);

        console.log(`Restauration de ${toRestore.length} numéros de commande...`);

        for (const cmd of toRestore) {
            try {
                await this.airtableService.updateCommande({
                    id: cmd.id,
                    numeroCommande: cmd.possibleOriginalNumber
                });

                console.log(`✅ Commande ${cmd.id}: ${cmd.currentNumber} → ${cmd.possibleOriginalNumber}`);
            } catch (error) {
                console.error(`❌ Erreur lors de la restauration de la commande ${cmd.id}:`, error);
            }
        }

        console.log('Restauration terminée');
    }

    /**
     * Génère un rapport des anomalies sans faire de modifications
     */
    async generateReport() {
        const suspicious = await this.analyzeCommandes();

        // Grouper par mois
        const byMonth: Record<string, any[]> = suspicious.reduce((acc: Record<string, any[]>, cmd) => {
            const date = new Date(cmd.creationDate);
            const month = date.getMonth() + 1;
            const year = date.getFullYear();
            const key = `${year}-${month}`;

            if (!acc[key]) acc[key] = [];
            acc[key].push(cmd);

            return acc;
        }, {});

        console.log('Rapport des anomalies par mois:');
        Object.entries(byMonth).forEach(([month, cmds]) => {
            console.log(`${month}: ${(cmds as any[]).length} commandes avec numéros potentiellement modifiés`);
        });

        return suspicious;
    }
}

// Exemple d'utilisation depuis la console
// const restorer = new CommandNumberRestorer('your_airtable_token');
// restorer.generateReport().then(suspicious => {
//   // Examiner les résultats dans la console
//   if (confirm('Voulez-vous restaurer les numéros de commande?')) {
//     restorer.restoreCommandNumbers(suspicious);
//   }
// });