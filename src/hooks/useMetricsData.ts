import { useState, useEffect, useMemo } from 'react';
import { FilterOptions, MetricData } from '../types/metrics';
import { useOffline } from '../contexts/OfflineContext';
import { simpleBackendService } from '../services/simple-backend.service';
import { MagasinInfo } from '../types/business.types';


export const useMetricsData = (filters: FilterOptions) => {
    const [data, setData] = useState<MetricData | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    
    const { dataService } = useOffline();
    
    // M√©moriser les filtres pour √©viter les boucles infinies
    const memoizedFilters = useMemo(() => filters, [
        filters.dateRange,
        filters.store,
        filters.driver,
        filters.startDate,
        filters.endDate,
        filters.customDateRange?.start,
        filters.customDateRange?.end,
        filters.customDateRange?.mode,
        filters.customDateRange?.singleDate
    ]);

    useEffect(() => {
        const fetchMetrics = async () => {
            setLoading(true);
            setError(null);

            try {
                console.log('üîÑ useMetricsData: Tentative r√©cup√©ration donn√©es...');

                // ‚úÖ UTILISER simpleBackendService comme dans Deliveries.tsx
                // Pour les chauffeurs, ne pas r√©cup√©rer les magasins (erreur 403)
                const promises = [
                    simpleBackendService.getCommandes(),
                    filters.driver ? Promise.resolve([]) : simpleBackendService.getMagasins(), // Pas de magasins pour les chauffeurs
                    simpleBackendService.getChauffeurs()
                ];

                const [commandes, magasins, chauffeurs] = await Promise.all(promises);

                console.log(`üìä Donn√©es r√©cup√©r√©es: ${commandes.length} commandes, ${magasins.length} magasins, ${chauffeurs.length} chauffeurs`);
                console.log(`üìä Source de donn√©es unifi√©e: simpleBackendService.getCommandes() (m√™me que Deliveries.tsx)`);

                // Calculer les m√©triques √† partir des commandes
                const metricsData = await calculateMetricsFromCommandes(commandes, filters, magasins, chauffeurs);
                setData(metricsData);
                console.log('‚úÖ M√©triques calcul√©es avec succ√®s');
                
            } catch (err) {
                console.error('‚ùå Erreur m√©triques:', err);

                // ‚úÖ FALLBACK : Essayer avec donn√©es locales si l'API √©choue
                try {
                    console.log('üîÑ Tentative avec donn√©es offline...');
                    const localCommandes = await dataService?.getCommandes() || [];
                    const localMagasins = await dataService?.getMagasins() || [];

                    if (localCommandes.length > 0) {
                        console.log(`üìä Utilisation donn√©es locales: ${localCommandes.length} commandes`);
                        const metricsData = await calculateMetricsFromCommandes(localCommandes, filters, localMagasins);
                        setData(metricsData);
                        setError('Donn√©es locales utilis√©es (API temporairement indisponible)');
                        return;
                    }
                } catch (fallbackError) {
                    console.error('‚ùå Fallback local √©chou√©:', fallbackError);
                }

                // ‚úÖ DERNIER RECOURS : Donn√©es vides mais interface fonctionnelle
                console.log('üîÑ Utilisation donn√©es vides par s√©curit√©');
                setData({
                    totalLivraisons: 0,
                    totalCommandes: 0,
                    enCours: 0,
                    enAttente: 0,
                    performance: 0,
                    chiffreAffaires: 0,
                    chauffeursActifs: 0,
                    historique: [{ date: 'Aucune donn√©e', totalLivraisons: 0, enCours: 0, enAttente: 0, performance: 0, chiffreAffaires: 0 }],
                    statutsDistribution: { enAttente: 0, enCours: 0, termine: 0, echec: 0 },
                    commandes: [],
                    magasins: [{
                        id: 'maintenance',
                        name: 'Service en maintenance',
                        address: 'Reconnexion en cours...',
                        phone: '',
                        email: '',
                        status: 'maintenance',
                        photo: '',
                        manager: ''
                    }],
                    chauffeurs: []
                });
                setError('Service temporairement indisponible - Interface de secours activ√©e');
            } finally {
                setLoading(false);
            }
        };

        fetchMetrics();
    }, [memoizedFilters, dataService]);

    return { data, loading, error };
};

// ‚úÖ FONCTION : Cr√©er donn√©es historiques dynamiques selon la p√©riode
function createHistoricalData(commandes: any[], filters: FilterOptions, nowFrance: string): any[] {
    console.log(`üìä createHistoricalData appel√©e avec ${commandes.length} commandes pour p√©riode: ${filters.dateRange}`);

    // ‚úÖ Dates personnalis√©es : Retourner un graphique simple par jour
    console.log('üìä DEBUG createHistoricalData customDateRange:', filters.customDateRange);

    const hasCompleteCustomDateChart = filters.customDateRange && (
        // Date unique compl√®te
        (filters.customDateRange.mode === 'single' && filters.customDateRange.singleDate) ||
        // P√©riode compl√®te (les deux dates)
        (filters.customDateRange.mode === 'range' && filters.customDateRange.start && filters.customDateRange.end)
    );

    if (hasCompleteCustomDateChart) {
        console.log('üìä G√©n√©ration graphique pour dates personnalis√©es');

        let startDate: Date, endDate: Date;

        if (filters.customDateRange.mode === 'single' && filters.customDateRange.singleDate) {
            startDate = endDate = new Date(filters.customDateRange.singleDate);

            // ‚úÖ Pour date unique : Cr√©er un graphique par cr√©neaux horaires comme pour "day"
            const targetDateStr = filters.customDateRange.singleDate;
            const allCreneaux = [];

            // Cr√©er les cr√©neaux 7h-20h comme pour la vue journali√®re
            for (let h = 7; h < 20; h++) {
                const creneau = `${h.toString().padStart(2, '0')}h-${(h + 1).toString().padStart(2, '0')}h`;

                const commandesHeure = commandes.filter(c => {
                    try {
                        // V√©rifier que c'est la bonne date
                        const dateLivraison = c.dates?.livraison || c.dateLivraison;
                        if (!dateLivraison) return false;

                        const itemDate = new Date(dateLivraison);
                        const itemDateStr = itemDate.toLocaleDateString('en-CA', { timeZone: 'Europe/Paris' });

                        if (itemDateStr !== targetDateStr) return false;

                        // V√©rifier le cr√©neau horaire
                        const creneauCommande = c.livraison?.creneau;
                        if (!creneauCommande) return false;

                        const match = creneauCommande.match(/(\d+)h/);
                        if (match) {
                            const creneauHeureCommande = parseInt(match[1]);
                            return creneauHeureCommande === h;
                        }

                        return false;
                    } catch (error) {
                        return false;
                    }
                });

                allCreneaux.push({
                    date: creneau,
                    totalLivraisons: commandesHeure.filter(c => c.statuts?.livraison === 'LIVREE').length,
                    enCours: commandesHeure.filter(c => ['EN COURS DE LIVRAISON', 'ENLEVEE'].includes(c.statuts?.livraison)).length,
                    enAttente: commandesHeure.filter(c => ['EN ATTENTE', 'CONFIRMEE'].includes(c.statuts?.livraison)).length,
                    chiffreAffaires: commandesHeure.filter(c => c.statuts?.livraison === 'LIVREE').reduce((sum, c) => sum + (c.financier?.tarifHT || 0), 0),
                    performance: commandesHeure.length > 0 ? Math.round((commandesHeure.filter(c => c.statuts?.livraison === 'LIVREE').length / commandesHeure.length) * 100) : 0
                });
            }

            return allCreneaux;
        } else if (filters.customDateRange.start || filters.customDateRange.end) {
            startDate = filters.customDateRange.start ? new Date(filters.customDateRange.start) : new Date();
            endDate = filters.customDateRange.end ? new Date(filters.customDateRange.end) : new Date();

            // Si seulement une date, utiliser celle-ci pour les deux
            if (!filters.customDateRange.start) {
                startDate = endDate;
            } else if (!filters.customDateRange.end) {
                endDate = startDate;
            }
        } else {
            return []; // Donn√©es incompl√®tes
        }

        // G√©n√©rer un point par jour dans la plage
        const days = [];
        const currentDay = new Date(startDate);

        while (currentDay <= endDate) {
            const dayStr = currentDay.toLocaleDateString('en-CA', { timeZone: 'Europe/Paris' });
            const commandesJour = commandes.filter(c => {
                const dateLivraison = c.dates?.livraison || c.dateLivraison;
                if (!dateLivraison) return false;

                const itemDate = new Date(dateLivraison);
                const itemDateStr = itemDate.toLocaleDateString('en-CA', { timeZone: 'Europe/Paris' });
                return itemDateStr === dayStr;
            });

            days.push({
                date: currentDay.toLocaleDateString('fr-FR', {
                    day: 'numeric',
                    month: 'short',
                    timeZone: 'Europe/Paris'
                }),
                totalLivraisons: commandesJour.filter(c => c.statuts?.livraison === 'LIVREE').length,
                enCours: commandesJour.filter(c => ['EN COURS DE LIVRAISON', 'ENLEVEE'].includes(c.statuts?.livraison)).length,
                enAttente: commandesJour.filter(c => ['EN ATTENTE', 'CONFIRMEE'].includes(c.statuts?.livraison)).length,
                chiffreAffaires: commandesJour.filter(c => c.statuts?.livraison === 'LIVREE').reduce((sum, c) => sum + (c.financier?.tarifHT || 0), 0),
                performance: commandesJour.length > 0 ? Math.round((commandesJour.filter(c => c.statuts?.livraison === 'LIVREE').length / commandesJour.length) * 100) : 0
            });

            currentDay.setDate(currentDay.getDate() + 1);
        }

        return days;
    }

    switch (filters.dateRange) {
        case 'day':
            // ‚úÖ CORRIG√â: Horaires 7h-20h et arr√™t √† l'heure actuelle
            const now = new Date();
            const currentHour = now.getHours();
            
            console.log(`üïí DEBUG: Heure actuelle: ${currentHour}h`);
            console.log(`üìä DEBUG: Total commandes re√ßues pour filtrage: ${commandes.length}`);
            
            // ‚úÖ CORRECTION : G√©n√©ration des cr√©neaux format "07h-08h, 08h-09h..." jusqu'√† 20h
            const allCreneaux = [];
            for (let h = 7; h < 20; h++) {
                const heureDebut = h.toString().padStart(2, '0');
                const heureFin = (h + 2).toString().padStart(2, '0');
                allCreneaux.push(`${heureDebut}h-${heureFin}h`);
            }
            
            // ‚úÖ CORRECTION : Pour la vue "day", montrer tous les cr√©neaux de la journ√©e
            // Si c'est apr√®s minuit (0h-6h), on affiche la journ√©e compl√®te
            // Si c'est pendant les heures d'activit√© (7h-20h), on affiche jusqu'√† l'heure actuelle
            const creneauxValidees = allCreneaux.filter(creneau => {
                const heureDebut = parseInt(creneau.split('h-')[0]);
                // Si on est en dehors des heures d'activit√© (0h-6h ou apr√®s 20h), montrer toute la journ√©e
                if (currentHour < 7 || currentHour >= 20) {
                    return true; // Montrer tous les cr√©neaux
                }
                // Sinon, montrer jusqu'√† l'heure actuelle
                return heureDebut <= currentHour;
            });
            
            console.log(`üìä Cr√©neaux valid√©s pour aujourd'hui: ${creneauxValidees.join(', ')}`);
            console.log(`üìÖ Date France pour filtrage: ${nowFrance}`);
            
            return creneauxValidees.map(creneau => {
                // Extraire l'heure de d√©but du cr√©neau pour le matching
                const heureDebut = parseInt(creneau.split('h-')[0]);
                
                // ‚úÖ FILTRAGE CORRECT : Commandes d'aujourd'hui avec cr√©neau horaire correspondant + filtre magasin
                const commandesHeure = commandes.filter(c => {
                    try {
                        // 0. ‚úÖ AJOUT : Filtrer par magasin si sp√©cifi√©
                        if (filters.store && c.magasin?.id !== filters.store) {
                            return false; // Pas le bon magasin
                        }

                        // 0.1 ‚úÖ AJOUT : Filtrer par chauffeur si sp√©cifi√©
                        if (filters.driver) {
                            const isAssigned = c.chauffeurs?.some(chauffeur =>
                                chauffeur.id === filters.driver ||
                                chauffeur.nom === filters.driver ||
                                `${chauffeur.prenom} ${chauffeur.nom}` === filters.driver
                            );
                            if (!isAssigned) {
                                return false; // Pas le bon chauffeur
                            }
                        }

                        // 1. D'abord v√©rifier que c'est aujourd'hui
                        const dateLivraison = c.dates?.livraison || c.dateLivraison;
                        if (!dateLivraison) {
                            console.log(`‚ö†Ô∏è Commande ${c.id}: pas de date de livraison`);
                            return false;
                        }

                        const itemDate = new Date(dateLivraison);
                        if (isNaN(itemDate.getTime())) {
                            console.log(`‚ö†Ô∏è Commande ${c.id}: date invalide`);
                            return false;
                        }

                        const itemDateStr = itemDate.toLocaleDateString('en-CA', {
                            timeZone: 'Europe/Paris'
                        });

                        if (itemDateStr !== nowFrance) {
                            console.log(`üìÖ Commande ${c.id}: date ${itemDateStr} ‚â† aujourd'hui ${nowFrance}`);
                            return false; // Pas aujourd'hui
                        }

                        console.log(`‚úÖ Commande ${c.id}: date OK (${itemDateStr})`);

                        // 2. Ensuite v√©rifier le cr√©neau horaire
                        const creneauCommande = c.livraison?.creneau;
                        if (!creneauCommande) {
                            console.log(`‚ö†Ô∏è Commande ${c.id}: pas de cr√©neau`);
                            return false;
                        }

                        console.log(`üïí Commande ${c.id}: cr√©neau "${creneauCommande}"`);

                        // ‚úÖ CORRECTION : Correspondance EXACTE pour √©viter les doublons
                        if (typeof creneauCommande === 'string') {
                            // Extraction de l'heure de d√©but du cr√©neau de la commande
                            const match = creneauCommande.match(/(\d+)h/);
                            if (match) {
                                const creneauHeureCommande = parseInt(match[1]);
                                const corresponds = creneauHeureCommande === heureDebut;

                                console.log(`üîç Commande ${c.id}: heure cr√©neau ${creneauHeureCommande} ${corresponds ? '==' : '‚â†'} heure filtre ${heureDebut}`);

                                // ‚úÖ CORRESPONDANCE EXACTE : L'heure de d√©but de la commande = heure de d√©but du cr√©neau affich√©
                                // Ex: Commande "12h-14h" ne correspond QU'AU cr√©neau "12h-14h", pas au "11h-13h"
                                return corresponds;
                            }
                        }

                        return false;
                    } catch (error) {
                        console.warn(`Erreur filtrage commande ${c.id}:`, error);
                        return false;
                    }
                });
                
                
                const result = {
                    date: creneau, // ‚úÖ CORRECTION : Afficher le cr√©neau complet (07h-08h)
                    totalLivraisons: commandesHeure.filter(c => c.statuts?.livraison === 'LIVREE').length,
                    enCours: commandesHeure.filter(c => ['EN COURS DE LIVRAISON', 'ENLEVEE'].includes(c.statuts?.livraison)).length,
                    enAttente: commandesHeure.filter(c => ['EN ATTENTE', 'CONFIRMEE'].includes(c.statuts?.livraison)).length,
                    chiffreAffaires: commandesHeure.filter(c => c.statuts?.livraison === 'LIVREE').reduce((sum, c) => sum + (c.financier?.tarifHT || 0), 0),
                    performance: commandesHeure.length > 0 ? Math.round((commandesHeure.filter(c => c.statuts?.livraison === 'LIVREE').length / commandesHeure.length) * 100) : 0
                };
                
                console.log(`üìä Cr√©neau ${creneau}: ${commandesHeure.length} commandes trouv√©es, r√©sultat:`, result);
                return result;
            });
            
        case 'week':
            // ‚úÖ CORRIG√â: Format complet des dates pour la semaine
            console.log(`üìä DEBUG semaine: commandes re√ßues=${commandes.length}`);
            const joursNoms = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'];
            const nowWeek = new Date();
            const currentDay = nowWeek.getDay() === 0 ? 7 : nowWeek.getDay(); // Dimanche = 7, Lundi = 1
            console.log(`üìä Jour actuel: ${currentDay} (1=Lundi, 7=Dimanche)`);
            
            return joursNoms.map((jour, index) => {
                const jourDate = new Date(nowWeek);
                jourDate.setDate(nowWeek.getDate() - nowWeek.getDay() + 1 + index); // Lundi = 1
                
                // ‚úÖ CORRECTION : Afficher TOUS les 7 jours (m√™me futurs avec 0 donn√©es)
                
                const jourDateStr = jourDate.toLocaleDateString('en-CA', { timeZone: 'Europe/Paris' });
                
                // ‚úÖ Format "Dim 14 sep" demand√©
                const jourFormate = jourDate.toLocaleDateString('fr-FR', {
                    weekday: 'short',
                    day: 'numeric',
                    month: 'short',
                    timeZone: 'Europe/Paris'
                }).replace('.', ''); // Supprimer le point apr√®s le mois
                
                // ‚úÖ FILTRAGE CORRECT : Commandes de cette semaine pour ce jour sp√©cifique + filtre magasin
                const commandesJour = commandes.filter(c => {
                    // ‚úÖ AJOUT : Filtrer par magasin si sp√©cifi√©
                    if (filters.store && c.magasin?.id !== filters.store) {
                        return false; // Pas le bon magasin
                    }

                    // ‚úÖ AJOUT : Filtrer par chauffeur si sp√©cifi√©
                    if (filters.driver) {
                        const isAssigned = c.chauffeurs?.some(chauffeur =>
                            chauffeur.id === filters.driver ||
                            chauffeur.nom === filters.driver ||
                            `${chauffeur.prenom} ${chauffeur.nom}` === filters.driver
                        );
                        if (!isAssigned) {
                            return false; // Pas le bon chauffeur
                        }
                    }

                    const dateLivraison = c.dates?.livraison || c.dateLivraison;
                    if (!dateLivraison) return false;

                    const itemDate = new Date(dateLivraison);
                    const itemDateStr = itemDate.toLocaleDateString('en-CA', { timeZone: 'Europe/Paris' });

                    // V√©rifier que c'est bien dans cette semaine ET ce jour pr√©cis
                    return itemDateStr === jourDateStr;
                });
                
                return {
                    date: jourFormate, // ‚úÖ Format complet "Dim 14 sep"
                    totalLivraisons: commandesJour.filter(c => c.statuts?.livraison === 'LIVREE').length, // ‚úÖ CORRIG√â: seulement LIVREE
                    enCours: commandesJour.filter(c => ['EN COURS DE LIVRAISON', 'ENLEVEE'].includes(c.statuts?.livraison)).length, // ‚úÖ CORRIG√â
                    enAttente: commandesJour.filter(c => ['EN ATTENTE', 'CONFIRMEE'].includes(c.statuts?.livraison)).length, // ‚úÖ CORRIG√â
                    chiffreAffaires: commandesJour.filter(c => c.statuts?.livraison === 'LIVREE').reduce((sum, c) => sum + (c.financier?.tarifHT || 0), 0),
                    performance: commandesJour.length > 0 ? Math.round((commandesJour.filter(c => c.statuts?.livraison === 'LIVREE').length / commandesJour.length) * 100) : 0
                };
            }); // ‚úÖ CORRECTION : Garder tous les jours (plus de filter(Boolean))
            
        case 'month':
            // ‚úÖ SOLUTION SIMPLE : Afficher par semaines r√©elles (lundi √† dimanche)
            const monthNowChart = new Date();
            const monthStartChart = new Date(monthNowChart.getFullYear(), monthNowChart.getMonth(), 1);
            const monthEndChart = new Date(monthNowChart.getFullYear(), monthNowChart.getMonth() + 1, 0);

            // G√©n√©rer toutes les semaines du mois (lundi √† dimanche)
            const weeksInMonth = [];
            let currentWeekStart = new Date(monthStartChart);

            // Commencer au lundi de la premi√®re semaine
            const dayOfWeek = currentWeekStart.getDay();
            const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // Dimanche = 0, Lundi = 1
            currentWeekStart.setDate(currentWeekStart.getDate() + mondayOffset);

            let weekIndex = 1;
            while (currentWeekStart <= monthEndChart) {
                const weekEnd = new Date(currentWeekStart);
                weekEnd.setDate(currentWeekStart.getDate() + 6); // Dimanche

                // Ne prendre que les semaines qui touchent le mois courant
                if (weekEnd >= monthStartChart && currentWeekStart <= monthEndChart) {
                    const commandesSemaine = commandes.filter(c => {
                        // ‚úÖ Filtrer par magasin si sp√©cifi√©
                        if (filters.store && c.magasin?.id !== filters.store) {
                            return false;
                        }

                        // ‚úÖ AJOUT : Filtrer par chauffeur si sp√©cifi√©
                        if (filters.driver) {
                            const isAssigned = c.chauffeurs?.some(chauffeur =>
                                chauffeur.id === filters.driver ||
                                chauffeur.nom === filters.driver ||
                                `${chauffeur.prenom} ${chauffeur.nom}` === filters.driver
                            );
                            if (!isAssigned) {
                                return false; // Pas le bon chauffeur
                            }
                        }

                        const dateLivraison = c.dates?.livraison || c.dateLivraison;
                        if (!dateLivraison) return false;

                        const itemDate = new Date(dateLivraison);
                        const itemDateStr = itemDate.toLocaleDateString('en-CA', { timeZone: 'Europe/Paris' });
                        const weekStartStr = currentWeekStart.toLocaleDateString('en-CA', { timeZone: 'Europe/Paris' });
                        const weekEndStr = weekEnd.toLocaleDateString('en-CA', { timeZone: 'Europe/Paris' });

                        return itemDateStr >= weekStartStr && itemDateStr <= weekEndStr;
                    });

                    weeksInMonth.push({
                        date: `S${weekIndex}`,
                        totalLivraisons: commandesSemaine.filter(c => c.statuts?.livraison === 'LIVREE').length,
                        enCours: commandesSemaine.filter(c => ['EN COURS DE LIVRAISON', 'ENLEVEE'].includes(c.statuts?.livraison)).length,
                        enAttente: commandesSemaine.filter(c => ['EN ATTENTE', 'CONFIRMEE'].includes(c.statuts?.livraison)).length,
                        chiffreAffaires: commandesSemaine.filter(c => c.statuts?.livraison === 'LIVREE').reduce((sum, c) => sum + (c.financier?.tarifHT || 0), 0),
                        performance: commandesSemaine.length > 0 ? Math.round((commandesSemaine.filter(c => c.statuts?.livraison === 'LIVREE').length / commandesSemaine.length) * 100) : 0
                    });

                    weekIndex++;
                }

                // Passer √† la semaine suivante
                currentWeekStart.setDate(currentWeekStart.getDate() + 7);
            }

            return weeksInMonth;
            
        case 'year':
            // Pour "Cette ann√©e" : Grouper par mois
            const mois = ['Jan', 'F√©v', 'Mar', 'Avr', 'Mai', 'Juin', 'Juil', 'Ao√ª', 'Sep', 'Oct', 'Nov', 'D√©c'];
            const nowYear = new Date();
            return mois.map((moisNom, index) => {
                const commandesMois = commandes.filter(c => {
                    // ‚úÖ AJOUT : Filtrer par magasin si sp√©cifi√©
                    if (filters.store && c.magasin?.id !== filters.store) {
                        return false; // Pas le bon magasin
                    }

                    // ‚úÖ AJOUT : Filtrer par chauffeur si sp√©cifi√©
                    if (filters.driver) {
                        const isAssigned = c.chauffeurs?.some(chauffeur =>
                            chauffeur.id === filters.driver ||
                            chauffeur.nom === filters.driver ||
                            `${chauffeur.prenom} ${chauffeur.nom}` === filters.driver
                        );
                        if (!isAssigned) {
                            return false; // Pas le bon chauffeur
                        }
                    }

                    const dateLivraison = c.dates?.livraison || c.dateLivraison;
                    if (!dateLivraison) return false;

                    const itemDate = new Date(dateLivraison);
                    return itemDate.getFullYear() === nowYear.getFullYear() && itemDate.getMonth() === index;
                });
                
                return {
                    date: moisNom,
                    totalLivraisons: commandesMois.filter(c => c.statuts?.livraison === 'LIVREE').length, // ‚úÖ CORRIG√â: seulement LIVREE
                    enCours: commandesMois.filter(c => ['EN COURS DE LIVRAISON', 'ENLEVEE'].includes(c.statuts?.livraison)).length, // ‚úÖ CORRIG√â: sans CONFIRMEE
                    enAttente: commandesMois.filter(c => ['EN ATTENTE', 'CONFIRMEE'].includes(c.statuts?.livraison)).length, // ‚úÖ CORRIG√â: CONFIRMEE = attente
                    chiffreAffaires: commandesMois.filter(c => c.statuts?.livraison === 'LIVREE').reduce((sum, c) => sum + (c.financier?.tarifHT || 0), 0),
                    performance: commandesMois.length > 0 ? Math.round((commandesMois.filter(c => c.statuts?.livraison === 'LIVREE').length / commandesMois.length) * 100) : 0
                };
            });
            
        default:
            // Fallback : donn√©es par d√©faut avec filtre magasin
            const commandesFiltered = commandes.filter(c => {
                if (filters.store && c.magasin?.id !== filters.store) {
                    return false; // Pas le bon magasin
                }

                // ‚úÖ AJOUT : Filtrer par chauffeur si sp√©cifi√©
                if (filters.driver) {
                    const isAssigned = c.chauffeurs?.some(chauffeur =>
                        chauffeur.id === filters.driver ||
                        chauffeur.nom === filters.driver ||
                        `${chauffeur.prenom} ${chauffeur.nom}` === filters.driver
                    );
                    if (!isAssigned) {
                        return false; // Pas le bon chauffeur
                    }
                }
                return true;
            });

            return [
                {
                    date: 'Donn√©es',
                    totalLivraisons: commandesFiltered.filter(c => c.statuts?.livraison === 'LIVREE').length,
                    enCours: commandesFiltered.filter(c => ['EN COURS DE LIVRAISON', 'ENLEVEE'].includes(c.statuts?.livraison)).length,
                    enAttente: commandesFiltered.filter(c => ['EN ATTENTE', 'CONFIRMEE'].includes(c.statuts?.livraison)).length,
                    chiffreAffaires: commandesFiltered.filter(c => c.statuts?.livraison === 'LIVREE').reduce((sum, c) => sum + (c.financier?.tarifHT || 0), 0),
                    performance: commandesFiltered.length > 0 ? Math.round((commandesFiltered.filter(c => c.statuts?.livraison === 'LIVREE').length / commandesFiltered.length) * 100) : 0
                }
            ];
    }
}


// ‚úÖ FONCTION : Calculer m√©triques √† partir des commandes backend
async function calculateMetricsFromCommandes(commandes: any[], filters: FilterOptions, magasins: MagasinInfo[], chauffeurs: any[] = []): Promise<MetricData> {
    // Utiliser le fuseau horaire fran√ßais pour les calculs
    const nowFrance = new Date().toLocaleDateString('en-CA', {
        timeZone: 'Europe/Paris'
    });
    
    console.log(`üîç Filtrage par p√©riode: ${filters.dateRange}, aujourd'hui: ${nowFrance}`);
    console.log(`üîç Total commandes re√ßues: ${commandes.length}`);
    
    // ‚úÖ DEBUG : Examiner la structure des dates des premi√®re commandes
    if (commandes.length > 0) {
        console.log('üîç DEBUG - Structure dates premi√®res commandes:');
        commandes.slice(0, 3).forEach((c, i) => {
            console.log(`   Commande ${i}:`, {
                id: c.id,
                dates: c.dates,
                dateLivraison: c.dateLivraison,
                statutLivraison: c.statuts?.livraison
            });
        });
    }
    
    // Filtrer par p√©riode avec fuseau fran√ßais
    let filteredCommandes = commandes;

    // ‚úÖ V√©rifier d'abord s'il y a des dates personnalis√©es COMPL√àTES
    console.log('üîç DEBUG customDateRange:', filters.customDateRange);

    const hasCompleteCustomDate = filters.customDateRange && (
        // Date unique compl√®te
        (filters.customDateRange.mode === 'single' && filters.customDateRange.singleDate) ||
        // P√©riode compl√®te (les deux dates)
        (filters.customDateRange.mode === 'range' && filters.customDateRange.start && filters.customDateRange.end)
    );

    if (hasCompleteCustomDate) {
        console.log('üóìÔ∏è Utilisation des dates personnalis√©es:', filters.customDateRange);

        if (filters.customDateRange.mode === 'single' && filters.customDateRange.singleDate) {
            // Mode date unique
            const targetDate = filters.customDateRange.singleDate;
            filteredCommandes = commandes.filter(c => {
                try {
                    const dateLivraison = c.dates?.livraison || c.dateLivraison;
                    if (!dateLivraison) return false;

                    const itemDate = new Date(dateLivraison);
                    if (isNaN(itemDate.getTime())) return false;

                    const itemDateStr = itemDate.toLocaleDateString('en-CA', { timeZone: 'Europe/Paris' });
                    return itemDateStr === targetDate;
                } catch (error) {
                    console.warn('Erreur filtrage date unique:', c.id, error);
                    return false;
                }
            });
        } else if (filters.customDateRange.mode === 'range' && (filters.customDateRange.start || filters.customDateRange.end)) {
            // Mode plage de dates
            const startDate = filters.customDateRange.start;
            const endDate = filters.customDateRange.end;
            console.log('üóìÔ∏è Filtrage range:', { startDate, endDate });

            filteredCommandes = commandes.filter(c => {
                try {
                    const dateLivraison = c.dates?.livraison || c.dateLivraison;
                    if (!dateLivraison) return false;

                    const itemDate = new Date(dateLivraison);
                    if (isNaN(itemDate.getTime())) return false;

                    const itemDateStr = itemDate.toLocaleDateString('en-CA', { timeZone: 'Europe/Paris' });

                    // Si seulement une date de d√©but
                    if (startDate && !endDate) {
                        return itemDateStr >= startDate;
                    }
                    // Si seulement une date de fin
                    if (!startDate && endDate) {
                        return itemDateStr <= endDate;
                    }
                    // Si les deux dates
                    if (startDate && endDate) {
                        return itemDateStr >= startDate && itemDateStr <= endDate;
                    }

                    return false;
                } catch (error) {
                    console.warn('Erreur filtrage plage dates:', c.id, error);
                    return false;
                }
            });
        }

        console.log(`üóìÔ∏è Commandes apr√®s filtrage dates personnalis√©es: ${filteredCommandes.length}`);
    } else {
        // Filtrer par p√©riode courante (logique existante)
        switch (filters.dateRange) {
        case 'day':
            filteredCommandes = commandes.filter(c => {
                try {
                    const dateLivraison = c.dates?.livraison || c.dateLivraison;
                    if (!dateLivraison) return false;

                    const itemDate = new Date(dateLivraison);
                    if (isNaN(itemDate.getTime())) return false; // Date invalide

                    const itemDateStr = itemDate.toLocaleDateString('en-CA', {
                        timeZone: 'Europe/Paris'
                    });

                    return itemDateStr === nowFrance;
                } catch (error) {
                    console.warn('Erreur filtrage commande:', c.id, error);
                    return false;
                }
            });
            console.log(`üìÖ Aujourd'hui: ${filteredCommandes.length} commandes`);
            break;
            
        case 'week':
            // ‚úÖ CORRECTION : Utiliser la m√™me logique que createHistoricalData (lundi-dimanche)
            const nowWeek = new Date();
            const startOfWeek = new Date(nowWeek);
            startOfWeek.setDate(nowWeek.getDate() - nowWeek.getDay() + 1); // Lundi
            const endOfWeek = new Date(nowWeek);
            endOfWeek.setDate(nowWeek.getDate() - nowWeek.getDay() + 7); // Dimanche

            const startOfWeekStr = startOfWeek.toLocaleDateString('en-CA', {
                timeZone: 'Europe/Paris'
            });
            const endOfWeekStr = endOfWeek.toLocaleDateString('en-CA', {
                timeZone: 'Europe/Paris'
            });

            filteredCommandes = commandes.filter(c => {
                try {
                    const dateLivraison = c.dates?.livraison || c.dateLivraison;
                    if (!dateLivraison) return false;

                    const itemDate = new Date(dateLivraison);
                    if (isNaN(itemDate.getTime())) return false;

                    const itemDateStr = itemDate.toLocaleDateString('en-CA', {
                        timeZone: 'Europe/Paris'
                    });

                    return itemDateStr >= startOfWeekStr && itemDateStr <= endOfWeekStr;
                } catch (error) {
                    console.warn('Erreur filtrage commande week:', c.id, error);
                    return false;
                }
            });
            console.log(`üìÖ Cette semaine (${startOfWeekStr} √† ${endOfWeekStr}): ${filteredCommandes.length} commandes`);
            break;
            
        case 'month':
            // ‚úÖ CORRECTION : Utiliser le mois complet (m√™me logique que createHistoricalData)
            const monthNow = new Date();
            const monthStart = new Date(monthNow.getFullYear(), monthNow.getMonth(), 1);
            const monthEnd = new Date(monthNow.getFullYear(), monthNow.getMonth() + 1, 0); // Dernier jour du mois

            const monthStartStr = monthStart.toLocaleDateString('en-CA', {
                timeZone: 'Europe/Paris'
            });
            const monthEndStr = monthEnd.toLocaleDateString('en-CA', {
                timeZone: 'Europe/Paris'
            });

            filteredCommandes = commandes.filter(c => {
                try {
                    const dateLivraison = c.dates?.livraison || c.dateLivraison;
                    if (!dateLivraison) return false;

                    const itemDate = new Date(dateLivraison);
                    if (isNaN(itemDate.getTime())) return false;

                    const itemDateStr = itemDate.toLocaleDateString('en-CA', {
                        timeZone: 'Europe/Paris'
                    });

                    return itemDateStr >= monthStartStr && itemDateStr <= monthEndStr;
                } catch (error) {
                    console.warn('Erreur filtrage commande month:', c.id, error);
                    return false;
                }
            });
            console.log(`üìÖ Ce mois complet (${monthStartStr} √† ${monthEndStr}): ${filteredCommandes.length} commandes`);
            break;
            
        case 'year':
            // ‚úÖ CORRECTION : Utiliser l'ann√©e compl√®te (1er janvier au 31 d√©cembre)
            const yearNow = new Date();
            const yearStart = new Date(yearNow.getFullYear(), 0, 1); // 1er janvier
            const yearEnd = new Date(yearNow.getFullYear(), 11, 31); // 31 d√©cembre

            const yearStartStr = yearStart.toLocaleDateString('en-CA', {
                timeZone: 'Europe/Paris'
            });
            const yearEndStr = yearEnd.toLocaleDateString('en-CA', {
                timeZone: 'Europe/Paris'
            });

            filteredCommandes = commandes.filter(c => {
                try {
                    const dateLivraison = c.dates?.livraison || c.dateLivraison;
                    if (!dateLivraison) return false;

                    const itemDate = new Date(dateLivraison);
                    if (isNaN(itemDate.getTime())) return false;

                    const itemDateStr = itemDate.toLocaleDateString('en-CA', {
                        timeZone: 'Europe/Paris'
                    });

                    return itemDateStr >= yearStartStr && itemDateStr <= yearEndStr;
                } catch (error) {
                    console.warn('Erreur filtrage commande year:', c.id, error);
                    return false;
                }
            });
            console.log(`üìÖ Cette ann√©e compl√®te (${yearStartStr} √† ${yearEndStr}): ${filteredCommandes.length} commandes`);
            break;
            
        default:
            console.log(`üìÖ Toutes les commandes: ${filteredCommandes.length} commandes`);
        }
    }
    
    // Filtrer par magasin si sp√©cifi√©
    if (filters.store) {
        console.log(`üè™ ===== DIAGNOSTIC FILTRAGE MAGASIN =====`);
        console.log(`üè™ Filtre demand√©: "${filters.store}"`);
        console.log(`üè™ Commandes avant filtrage magasin: ${filteredCommandes.length}`);
        
        // Diagnostic d√©taill√© des structures de magasins
        const exemplesMagasins = filteredCommandes.slice(0, 3).map(c => ({
            id: c.magasin?.id,
            name: c.magasin?.name,
            nom: c.magasin?.nom,
            structure: Object.keys(c.magasin || {})
        }));
        console.log(`üè™ Exemples structures magasins:`, exemplesMagasins);
        
        // Liste unique des magasins pr√©sents
        const magasinsPresents = Array.from(new Set<string>(
            filteredCommandes.map(c => c.magasin?.name || c.magasin?.nom || c.magasin?.id)
                .filter(Boolean) as string[]
        ));
        console.log(`üè™ Magasins pr√©sents dans les donn√©es:`, magasinsPresents);
        
        const beforeCount = filteredCommandes.length;
        filteredCommandes = filteredCommandes.filter(c => {
            const matches = c.magasin?.id === filters.store || 
                           c.magasin?.name === filters.store ||
                           c.magasin?.nom === filters.store;
            
            if (!matches && c.magasin) {
                // Log des non-correspondances pour debugging
                console.log(`üîç Non-match:`, {
                    filter: filters.store,
                    magasin: { id: c.magasin.id, name: c.magasin.name, nom: c.magasin.nom }
                });
            }
            
            return matches;
        });
        
        console.log(`üè™ R√©sultat filtrage: ${filteredCommandes.length}/${beforeCount} commandes`);
        console.log(`üè™ ==========================================`);
    }

    // ‚úÖ FILTRAGE PAR CHAUFFEUR si sp√©cifi√©
    if (filters.driver) {
        console.log(`üöõ ===== DIAGNOSTIC FILTRAGE CHAUFFEUR =====`);
        console.log(`üöõ Filtre demand√©: "${filters.driver}"`);
        console.log(`üöõ Commandes avant filtrage chauffeur: ${filteredCommandes.length}`);

        // Diagnostic d√©taill√© des structures de chauffeurs
        const exemplesChauffeurs = filteredCommandes.slice(0, 3).map(c => ({
            chauffeurs: c.chauffeurs?.map(ch => ({ id: ch.id, nom: ch.nom, prenom: ch.prenom })),
            structure: c.chauffeurs ? Object.keys(c.chauffeurs[0] || {}) : []
        }));
        console.log(`üöõ Exemples structures chauffeurs:`, exemplesChauffeurs);

        const beforeCountChauffeur = filteredCommandes.length;
        filteredCommandes = filteredCommandes.filter(c => {
            // V√©rifier si le chauffeur est assign√© √† cette commande
            const isAssigned = c.chauffeurs?.some(chauffeur =>
                chauffeur.id === filters.driver ||
                chauffeur.nom === filters.driver ||
                `${chauffeur.prenom} ${chauffeur.nom}` === filters.driver
            );

            if (!isAssigned && c.chauffeurs?.length > 0) {
                // Log des non-correspondances pour debugging
                console.log(`üîç Chauffeur non-match:`, {
                    filter: filters.driver,
                    chauffeurs: c.chauffeurs.map(ch => ({ id: ch.id, nom: ch.nom, prenom: ch.prenom }))
                });
            }

            return isAssigned;
        });

        console.log(`üöõ R√©sultat filtrage: ${filteredCommandes.length}/${beforeCountChauffeur} commandes`);
        console.log(`üöõ ==========================================`);
    }

    // ‚úÖ CALCUL M√âTRIQUE CORRIG√â selon d√©finitions business
    const totalCommandes = filteredCommandes.length; // Total g√©n√©ral pour calculs internes
    
    // üéØ D√âFINITIONS CORRECTES :
    const commandesLivrees = filteredCommandes.filter(c => c.statuts?.livraison === 'LIVREE').length; // ‚úÖ Total Livraisons = LIVREE uniquement
    const commandesEnCours = filteredCommandes.filter(c => 
        ['EN COURS DE LIVRAISON', 'ENLEVEE'].includes(c.statuts?.livraison) // ‚úÖ En cours = ENLEVEE + EN COURS (pas CONFIRMEE)
    ).length;
    const commandesAnnulees = filteredCommandes.filter(c => 
        ['ANNULEE', 'ECHEC'].includes(c.statuts?.livraison)
    ).length;
    const enAttente = filteredCommandes.filter(c => 
        ['EN ATTENTE', 'CONFIRMEE'].includes(c.statuts?.livraison) // ‚úÖ CONFIRMEE = en attente de traitement
    ).length;
    
    // ‚úÖ Chiffre d'affaires = uniquement livraisons r√©ussies (LIVREE)
    const chiffreAffaires = filteredCommandes
        .filter(c => c.statuts?.livraison === 'LIVREE')
        .reduce((sum, c) => sum + (c.financier?.tarifHT || 0), 0);
    
    // ‚úÖ Performance = % de livraisons r√©ussies sur total des commandes
    const tauxLivraison = totalCommandes > 0 ? (commandesLivrees / totalCommandes) * 100 : 0;
    
    // Calculer les chauffeurs actifs
    const chauffeursActifs = new Set<string>(
        filteredCommandes
            .filter(c => ['EN COURS DE LIVRAISON', 'CONFIRMEE', 'ENLEVEE'].includes(c.statuts?.livraison))
            .flatMap(c => c.chauffeurs || [])
            .map(chauffeur => chauffeur.id)
    ).size;
    
    // Cr√©er des donn√©es d'historique dynamiques selon la p√©riode
    // ‚úÖ IMPORTANT : Passer TOUTES les commandes mais que createHistoricalData applique le filtre magasin
    const historique = createHistoricalData(commandes, filters, nowFrance);
    
    // Calculer la distribution des statuts
    const statutsDistribution = {
        enAttente: totalCommandes > 0 ? enAttente / totalCommandes : 0,
        enCours: totalCommandes > 0 ? commandesEnCours / totalCommandes : 0,
        termine: totalCommandes > 0 ? commandesLivrees / totalCommandes : 0,
        echec: totalCommandes > 0 ? commandesAnnulees / totalCommandes : 0
    };
    
    console.log('‚úÖ Utilisation des magasins r√©cup√©r√©s via API:', magasins.length, 'magasins');
    console.log('üìã Exemples:', magasins.slice(0, 2));
    
    return {
        totalLivraisons: commandesLivrees, // ‚úÖ CORRIG√â: livraisons r√©ussies uniquement (LIVREE)
        totalCommandes, // ‚úÖ AJOUT : Total de toutes les commandes pour format "X sur Y"
        enCours: commandesEnCours,
        enAttente,
        performance: Math.round(tauxLivraison),
        chiffreAffaires,
        chauffeursActifs,
        historique,
        statutsDistribution,
        commandes: filteredCommandes,
        magasins,
        chauffeurs
    };
}