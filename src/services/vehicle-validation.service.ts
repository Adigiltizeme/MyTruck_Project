import { ArticlesType } from '../types/business.types';

/**
 * Types de v√©hicules disponibles pour les livraisons
 */
export type VehicleType = '1M3' | '6M3' | '10M3' | '20M3';

/**
 * Interface repr√©sentant les dimensions maximales d'un v√©hicule
 */
export interface VehicleCapacity {
    length: number; // Longueur en cm
    width: number;  // Largeur en cm
    height: number; // Hauteur en cm
    weight: number; // Poids en kg
    description: string; // Description du v√©hicule
}

/**
 * Service pour la validation des v√©hicules et √©quipiers en fonction des articles √† livrer
 */
export class VehicleValidationService {
    // Capacit√©s maximales des v√©hicules, bas√©es sur le PDF partag√©
    private static readonly VEHICLE_CAPACITIES: Record<VehicleType, VehicleCapacity> = {
        '1M3': {
            length: 100,
            width: 100,
            height: 100,
            weight: 150,
            description: 'Utilitaire 1m¬≥ (150kg, max 100x100x100cm)'
        },
        '6M3': {
            length: 260,
            width: 160,
            height: 125,
            weight: 300,
            description: 'Camionnette 6m¬≥ (300kg, max 260x160x125cm)'
        },
        '10M3': {
            length: 310,
            width: 178,
            height: 190,
            weight: 800,
            description: 'Camionnette 10m¬≥ (800kg, max 310x178x190cm)'
        },
        '20M3': {
            length: 410,
            width: 200,
            height: 210,
            weight: 750,
            description: 'Camion 20m¬≥ avec hayon (750kg, max 410x200x210cm)'
        }
    };

    /**
     * Obtient les capacit√©s d'un type de v√©hicule
     * @param vehicleType Type de v√©hicule
     * @returns Capacit√©s du v√©hicule
     */
    public static getVehicleCapacity(vehicleType: VehicleType): VehicleCapacity {
        return this.VEHICLE_CAPACITIES[vehicleType];
    }

    /**
     * Obtient tous les types de v√©hicules disponibles
     * @returns Liste des types de v√©hicules
     */
    public static getAvailableVehicleTypes(): VehicleType[] {
        return Object.keys(this.VEHICLE_CAPACITIES) as VehicleType[];
    }

    /**
     * V√©rifie si un article peut √™tre transport√© dans un v√©hicule
     * @param article Article √† transporter
     * @param vehicleType Type de v√©hicule
     * @param canBeTilted L'article peut-il √™tre couch√© (pour les arbres, objets longs)
     * @returns True si l'article peut √™tre transport√©, false sinon
     */
    public static canFitInVehicle(
        article: { longueur?: number; largeur?: number; hauteur?: number; poids?: number },
        vehicleType: VehicleType,
        canBeTilted: boolean = false
    ): boolean {
        const vehicleCapacity = this.VEHICLE_CAPACITIES[vehicleType];

        // V√©rifier le poids
        if (article.poids && article.poids > vehicleCapacity.weight) {
            return false;
        }

        // Si aucune dimension n'est sp√©cifi√©e, on consid√®re que l'article peut √™tre transport√©
        if (!article.longueur && !article.largeur && !article.hauteur) {
            return true;
        }

        const longueur = article.longueur || 0;
        const largeur = article.largeur || 0;
        const hauteur = article.hauteur || 0;

        // V√©rifier les dimensions standards
        const standardFit =
            longueur <= vehicleCapacity.length &&
            largeur <= vehicleCapacity.width &&
            hauteur <= vehicleCapacity.height;

        if (standardFit) {
            return true;
        }

        // Si l'article peut √™tre couch√©, v√©rifier les dimensions suppl√©mentaires
        if (canBeTilted) {
            // V√©rifier toutes les orientations possibles
            // Orientation 1: longueur dans la longueur, largeur dans la largeur, hauteur dans la hauteur
            const orientation1 =
                longueur <= vehicleCapacity.length &&
                largeur <= vehicleCapacity.width &&
                hauteur <= vehicleCapacity.height;

            // Orientation 2: longueur dans la longueur, hauteur dans la largeur, largeur dans la hauteur
            const orientation2 =
                longueur <= vehicleCapacity.length &&
                hauteur <= vehicleCapacity.width &&
                largeur <= vehicleCapacity.height;

            // Orientation 3: largeur dans la longueur, longueur dans la largeur, hauteur dans la hauteur
            const orientation3 =
                largeur <= vehicleCapacity.length &&
                longueur <= vehicleCapacity.width &&
                hauteur <= vehicleCapacity.height;

            // Orientation 4: largeur dans la longueur, hauteur dans la largeur, longueur dans la hauteur
            const orientation4 =
                largeur <= vehicleCapacity.length &&
                hauteur <= vehicleCapacity.width &&
                longueur <= vehicleCapacity.height;

            // Orientation 5: hauteur dans la longueur, longueur dans la largeur, largeur dans la hauteur
            const orientation5 =
                hauteur <= vehicleCapacity.length &&
                longueur <= vehicleCapacity.width &&
                largeur <= vehicleCapacity.height;

            // Orientation 6: hauteur dans la longueur, largeur dans la largeur, longueur dans la hauteur
            const orientation6 =
                hauteur <= vehicleCapacity.length &&
                largeur <= vehicleCapacity.width &&
                longueur <= vehicleCapacity.height;

            return orientation1 || orientation2 || orientation3 || orientation4 || orientation5 || orientation6;
        }

        return false;
    }

    /**
     * Recommande un v√©hicule pour transporter un ensemble d'articles
     * @param articles Articles √† transporter
     * @param canBeTilted Les articles peuvent-ils √™tre couch√©s
     * @returns Le type de v√©hicule recommand√© ou null si aucun ne convient
     */
    public static recommendVehicle(
        articles: { longueur?: number; largeur?: number; hauteur?: number; poids?: number }[],
        canBeTilted: boolean = false
    ): VehicleType | null {
        // Si aucun article n'est sp√©cifi√©, recommander le plus petit v√©hicule
        if (!articles || articles.length === 0) {
            return '1M3';
        }

        // Calculer les dimensions maximales et le poids total
        let maxLength = 0;
        let maxWidth = 0;
        let maxHeight = 0;
        let totalWeight = 0;

        articles.forEach(article => {
            maxLength = Math.max(maxLength, article.longueur || 0);
            maxWidth = Math.max(maxWidth, article.largeur || 0);
            maxHeight = Math.max(maxHeight, article.hauteur || 0);
            totalWeight += article.poids || 0;
        });

        // Chercher le plus petit v√©hicule qui peut transporter les articles
        const vehicleTypes = this.getAvailableVehicleTypes();

        for (const vehicleType of vehicleTypes) {
            const vehicleCapacity = this.VEHICLE_CAPACITIES[vehicleType];

            // V√©rifier le poids
            if (totalWeight > vehicleCapacity.weight) {
                continue;
            }

            // V√©rifier les dimensions standards
            if (
                maxLength <= vehicleCapacity.length &&
                maxWidth <= vehicleCapacity.width &&
                maxHeight <= vehicleCapacity.height
            ) {
                return vehicleType;
            }

            // Si les articles peuvent √™tre couch√©s, v√©rifier les orientations alternatives
            if (canBeTilted) {
                // On v√©rifie si l'une des orientations possibles permet de faire entrer les articles
                if (
                    (maxLength <= vehicleCapacity.length && maxHeight <= vehicleCapacity.width && maxWidth <= vehicleCapacity.height) ||
                    (maxWidth <= vehicleCapacity.length && maxLength <= vehicleCapacity.width && maxHeight <= vehicleCapacity.height) ||
                    (maxWidth <= vehicleCapacity.length && maxHeight <= vehicleCapacity.width && maxLength <= vehicleCapacity.height) ||
                    (maxHeight <= vehicleCapacity.length && maxLength <= vehicleCapacity.width && maxWidth <= vehicleCapacity.height) ||
                    (maxHeight <= vehicleCapacity.length && maxWidth <= vehicleCapacity.width && maxLength <= vehicleCapacity.height)
                ) {
                    return vehicleType;
                }
            }
        }

        // Si aucun v√©hicule ne convient, retourner null
        return null;
    }

    /**
     * üéØ NOUVELLE LOGIQUE HI√âRARCHIQUE NON-CUMULATIVE
     * D√©termine le niveau d'√©quipiers requis selon 3 niveaux:
     * NIVEAU 1: +1 √©quipier (2 personnes total)
     * NIVEAU 2: +2 √©quipiers (3 personnes total) 
     * NIVEAU 3: Devis obligatoire (‚â•3 √©quipiers)
     */
    public static getRequiredCrewSize(
        articles: { poids?: number; quantite?: number; categories?: string[] }[],
        deliveryConditions: {
            hasElevator?: boolean;
            totalItemCount?: number;
            rueInaccessible?: boolean;
            paletteComplete?: boolean;
            parkingDistance?: number;
            hasStairs?: boolean;
            stairCount?: number;
            needsAssembly?: boolean;
            floor?: number | string;
            isDuplex?: boolean;
            deliveryToUpperFloor?: boolean;
            estimatedHandlingTime?: number; // en minutes
            hasLargeVoluminousItems?: boolean;
            multipleLargeVoluminousItems?: boolean;
            complexAccess?: boolean; // combinaison: pas ascenseur + >45min + cours √† traverser
        } = {}
    ): number {
        if (!articles || articles.length === 0) {
            return 0;
        }

        console.log('üéØ NOUVELLE LOGIQUE √âQUIPIERS - HI√âRARCHIQUE NON-CUMULATIVE');

        // üîç CALCULS DE BASE
        let heaviestIndividualWeight = 0;
        articles.forEach(article => {
            const poids = article.poids || 0;
            if (poids > heaviestIndividualWeight) {
                heaviestIndividualWeight = poids;
            }
        });

        const totalWeight = articles.reduce((sum, article) =>
            sum + ((article.poids || 0) * (article.quantite || 1)), 0
        );

        const totalItemCount = deliveryConditions.totalItemCount ||
            articles.reduce((sum, article) => sum + (article.quantite || 1), 0);

        // Calculer l'√©tage effectif
        let effectiveFloor = 0;
        if (deliveryConditions.floor) {
            effectiveFloor = typeof deliveryConditions.floor === 'string'
                ? parseInt(deliveryConditions.floor) || 0
                : deliveryConditions.floor;
        }
        if (deliveryConditions.isDuplex && deliveryConditions.deliveryToUpperFloor) {
            effectiveFloor += 1;
        }

        // Identifier les articles type plantes/terreaux/pots
        const plantArticleCount = articles.reduce((sum, article) => {
            const isPlantRelated = article.categories?.some(cat => 
                cat.toLowerCase().includes('plante') || 
                cat.toLowerCase().includes('terreau') || 
                cat.toLowerCase().includes('pot')
            ) || false;
            return sum + (isPlantRelated ? (article.quantite || 1) : 0);
        }, 0);

        console.log(`üìä Donn√©es calcul√©es:`, {
            heaviestIndividualWeight,
            totalWeight,
            totalItemCount,
            plantArticleCount,
            effectiveFloor,
            hasElevator: deliveryConditions.hasElevator,
            estimatedHandlingTime: deliveryConditions.estimatedHandlingTime
        });

        const triggeredConditions: string[] = [];

        // üî• NIVEAU 3: DEVIS OBLIGATOIRE (‚â•3 √©quipiers) - PRIORIT√â MAXIMALE
        
        // Article ‚â•90kg
        if (heaviestIndividualWeight >= 90) {
            triggeredConditions.push(`DEVIS: Article tr√®s lourd (${heaviestIndividualWeight}kg ‚â•90kg)`);
            console.log('üö® DEVIS REQUIS: Article ‚â•90kg');
            return 3; // Retour imm√©diat
        }

        // 3+ √©tages sans ascenseur avec ‚â•40 articles plantes/terreaux/pots
        if (effectiveFloor >= 3 && !deliveryConditions.hasElevator && plantArticleCount >= 40) {
            triggeredConditions.push(`DEVIS: ${effectiveFloor} √©tages + ${plantArticleCount} articles plantes sans ascenseur`);
            console.log('üö® DEVIS REQUIS: √âtages + nombreuses plantes sans ascenseur');
            return 3;
        }

        // Palette + acc√®s compliqu√© (pas ascenseur + >45min + cours √† traverser)
        if (deliveryConditions.paletteComplete && deliveryConditions.complexAccess) {
            triggeredConditions.push('DEVIS: Palette + acc√®s tr√®s compliqu√©');
            console.log('üö® DEVIS REQUIS: Palette + acc√®s compliqu√©');
            return 3;
        }

        // Plusieurs gros sujets volumineux
        if (deliveryConditions.multipleLargeVoluminousItems) {
            triggeredConditions.push('DEVIS: Plusieurs gros sujets volumineux');
            console.log('üö® DEVIS REQUIS: Plusieurs gros sujets volumineux');
            return 3;
        }

        // Manutention >45min
        if ((deliveryConditions.estimatedHandlingTime || 0) > 45) {
            triggeredConditions.push(`DEVIS: Manutention longue (${deliveryConditions.estimatedHandlingTime}min >45min)`);
            console.log('üö® DEVIS REQUIS: Manutention >45min');
            return 3;
        }

        // üü° NIVEAU 2: +2 √âQUIPIERS (3 personnes total)
        
        // Article ‚â•60kg et <90kg
        if (heaviestIndividualWeight >= 60 && heaviestIndividualWeight < 90) {
            triggeredConditions.push(`2 √©quipiers: Article lourd (${heaviestIndividualWeight}kg ‚â•60kg et <90kg)`);
            console.log('‚ö†Ô∏è 2 √âQUIPIERS: Article ‚â•60kg et <90kg');
            return 2;
        }

        // ‚â•3 √©tages sans ascenseur avec ‚â•30 articles plantes/terreaux/pots
        if (effectiveFloor >= 3 && !deliveryConditions.hasElevator && plantArticleCount >= 30) {
            triggeredConditions.push(`2 √©quipiers: ${effectiveFloor} √©tages + ${plantArticleCount} articles plantes sans ascenseur`);
            console.log('‚ö†Ô∏è 2 √âQUIPIERS: √âtages + plantes sans ascenseur');
            return 2;
        }

        // Palette √† d√©palettiser + montage en √©tage
        if (deliveryConditions.paletteComplete && effectiveFloor > 0) {
            triggeredConditions.push(`2 √©quipiers: Palette + montage en √©tage (${effectiveFloor}√®me)`);
            console.log('‚ö†Ô∏è 2 √âQUIPIERS: Palette + √©tage');
            return 2;
        }

        // Gros sujets volumineux (palmiers, etc.)
        if (deliveryConditions.hasLargeVoluminousItems) {
            triggeredConditions.push('2 √©quipiers: Gros sujet volumineux (palmier, etc.)');
            console.log('‚ö†Ô∏è 2 √âQUIPIERS: Gros sujet volumineux');
            return 2;
        }

        // Manutention ‚â•30min et ‚â§45min
        if ((deliveryConditions.estimatedHandlingTime || 0) >= 30 && (deliveryConditions.estimatedHandlingTime || 0) <= 45) {
            triggeredConditions.push(`2 √©quipiers: Manutention longue (${deliveryConditions.estimatedHandlingTime}min ‚â•30min et ‚â§45min)`);
            console.log('‚ö†Ô∏è 2 √âQUIPIERS: Manutention ‚â•30min et ‚â§45min');
            return 2;
        }

        // üü¢ NIVEAU 1: +1 √âQUIPIER (2 personnes total)
        
        // üî∏ CONDITION PRIORITAIRE: Article ‚â•30kg et <60kg (prend priorit√© sur charge totale)
        if (heaviestIndividualWeight >= 30 && heaviestIndividualWeight < 60) {
            triggeredConditions.push(`1 √©quipier: Article lourd (${heaviestIndividualWeight}kg ‚â•30kg et <60kg)`);
            console.log('‚úÖ 1 √âQUIPIER: Article ‚â•30kg et <60kg');
            return 1;
        }

        // üî∏ Charge totale lourde (SEULEMENT si pas d'article ‚â•30kg individuel)
        if (heaviestIndividualWeight < 30 && 
            ((deliveryConditions.hasElevator && totalWeight >= 300) || 
             (!deliveryConditions.hasElevator && totalWeight >= 200))) {
            const condition = deliveryConditions.hasElevator ? 'avec ascenseur' : 'sans ascenseur';
            triggeredConditions.push(`1 √©quipier: Charge lourde ${totalWeight}kg ${condition} (aucun article ‚â•30kg)`);
            console.log(`‚úÖ 1 √âQUIPIER: Charge lourde ${condition} sans article lourd individuel`);
            return 1;
        }

        // üî∏ √âtage √©lev√© sans ascenseur (‚â•2√®me √©tage) avec nombreux articles (‚â•20)
        if (effectiveFloor >= 2 && !deliveryConditions.hasElevator && totalItemCount >= 20) {
            triggeredConditions.push(`1 √©quipier: √âtage √©lev√© (${effectiveFloor}√®me sans ascenseur) + nombreux articles (${totalItemCount})`);
            console.log('‚úÖ 1 √âQUIPIER: √âtage √©lev√© + nombreux articles');
            return 1;
        }

        // üî∏ Nombreux articles (‚â•20) - SEULEMENT si pas d'√©tage sans ascenseur
        if (totalItemCount >= 20 && (deliveryConditions.hasElevator || effectiveFloor < 2)) {
            triggeredConditions.push(`1 √©quipier: Nombreux articles (${totalItemCount} ‚â•20)`);
            console.log('‚úÖ 1 √âQUIPIER: Nombreux articles (sans √©tage probl√©matique)');
            return 1;
        }

        // üî∏ Rue inaccessible
        if (deliveryConditions.rueInaccessible) {
            triggeredConditions.push('1 √©quipier: Rue inaccessible');
            console.log('‚úÖ 1 √âQUIPIER: Rue inaccessible');
            return 1;
        }

        // üî∏ Palette compl√®te simple (rez-de-chauss√©e uniquement)
        if (deliveryConditions.paletteComplete && effectiveFloor === 0) {
            triggeredConditions.push('1 √©quipier: Palette compl√®te (rez-de-chauss√©e)');
            console.log('‚úÖ 1 √âQUIPIER: Palette simple');
            return 1;
        }

        // üî∏ Distance de portage ‚â•50m
        if ((deliveryConditions.parkingDistance || 0) >= 50) {
            triggeredConditions.push(`1 √©quipier: Distance portage (${deliveryConditions.parkingDistance}m ‚â•50m)`);
            console.log('‚úÖ 1 √âQUIPIER: Distance portage');
            return 1;
        }

        // üî∏ Nombreuses marches ‚â•20
        if (deliveryConditions.hasStairs && (deliveryConditions.stairCount || 0) >= 20) {
            triggeredConditions.push(`1 √©quipier: Nombreuses marches (${deliveryConditions.stairCount} ‚â•20)`);
            console.log('‚úÖ 1 √âQUIPIER: Nombreuses marches');
            return 1;
        }

        // üî∏ Montage/installation standard
        if (deliveryConditions.needsAssembly) {
            triggeredConditions.push('1 √©quipier: Montage/installation');
            console.log('‚úÖ 1 √âQUIPIER: Montage n√©cessaire');
            return 1;
        }

        // üîµ AUCUNE CONDITION = CHAUFFEUR SEUL
        console.log('‚úÖ 0 √âQUIPIER: Chauffeur seul suffisant');
        return 0;
    }

    /**
     * üÜï M√âTHODE UTILITAIRE : Valide si le nombre d'√©quipiers s√©lectionn√© est suffisant
     */
    public static validateCrewSize(
        selectedCrewSize: number,
        articles: { poids?: number; quantite?: number }[],
        deliveryConditions: any
    ): {
        isValid: boolean;
        requiredCrewSize: number;
        deficiency: number;
        triggeredConditions: string[];
        recommendations: string[];
    } {
        const requiredCrewSize = this.getRequiredCrewSize(articles, deliveryConditions);
        const isValid = selectedCrewSize >= requiredCrewSize;
        const deficiency = Math.max(0, requiredCrewSize - selectedCrewSize);

        const recommendations: string[] = [];
        if (!isValid) {
            if (requiredCrewSize >= 3) {
                recommendations.push('‚ö†Ô∏è Cas exceptionnel - Devis obligatoire');
            }
        }

        // Obtenir les conditions d√©clench√©es depuis getValidationDetails
        const details = this.getValidationDetails(articles, deliveryConditions);

        return {
            isValid,
            requiredCrewSize,
            deficiency,
            triggeredConditions: details.triggeredConditions,
            recommendations
        };
    }

    /**
     * üÜï M√âTHODE COMPL√àTE : D√©tails de validation avec la nouvelle logique hi√©rarchique
     */
    public static getValidationDetails(
        articles: { longueur?: number; largeur?: number; hauteur?: number; poids?: number; quantite?: number; categories?: string[] }[],
        conditions: {
            hasElevator?: boolean;
            totalItemCount?: number;
            rueInaccessible?: boolean;
            paletteComplete?: boolean;
            parkingDistance?: number;
            hasStairs?: boolean;
            stairCount?: number;
            needsAssembly?: boolean;
            floor?: number | string;
            isDuplex?: boolean;
            deliveryToUpperFloor?: boolean;
            estimatedHandlingTime?: number;
            hasLargeVoluminousItems?: boolean;
            multipleLargeVoluminousItems?: boolean;
            complexAccess?: boolean;
        } = {}
    ): {
        requiredVehicle: VehicleType | null;
        requiredCrew: number;
        largestArticle: { longueur: number; largeur: number; hauteur: number; poids: number } | null;
        heaviestArticle: number;
        totalWeight: number;
        totalItems: number;
        effectiveFloor: number;
        triggeredConditions: string[];
        needsQuote: boolean;
    } {
        const totalWeight = articles.reduce((sum, article) =>
            sum + ((article.poids || 0) * (article.quantite || 1)), 0
        );

        const totalItems = conditions.totalItemCount ||
            articles.reduce((sum, article) => sum + (article.quantite || 1), 0);

        // Calculer l'√©tage effectif
        let effectiveFloor = 0;
        if (conditions.floor) {
            effectiveFloor = typeof conditions.floor === 'string'
                ? parseInt(conditions.floor) || 0
                : conditions.floor;
        }
        if (conditions.isDuplex && conditions.deliveryToUpperFloor) {
            effectiveFloor += 1;
        }

        let largestArticle = null;
        let largestVolume = 0;
        let heaviestArticle = 0;

        articles.forEach(article => {
            const volume = (article.longueur || 0) * (article.largeur || 0) * (article.hauteur || 0);
            if (volume > largestVolume) {
                largestVolume = volume;
                largestArticle = {
                    longueur: article.longueur || 0,
                    largeur: article.largeur || 0,
                    hauteur: article.hauteur || 0,
                    poids: article.poids || 0
                };
            }

            if ((article.poids || 0) > heaviestArticle) {
                heaviestArticle = article.poids || 0;
            }
        });

        // Identifier les articles type plantes/terreaux/pots
        const plantArticleCount = articles.reduce((sum, article) => {
            const isPlantRelated = article.categories?.some(cat => 
                cat.toLowerCase().includes('plante') || 
                cat.toLowerCase().includes('terreau') || 
                cat.toLowerCase().includes('pot')
            ) || false;
            return sum + (isPlantRelated ? (article.quantite || 1) : 0);
        }, 0);

        const requiredCrew = this.getRequiredCrewSize(articles, conditions);
        const needsQuote = requiredCrew >= 3;

        // üÜï Construire la liste des conditions selon la nouvelle logique hi√©rarchique
        const triggeredConditions: string[] = [];

        // NIVEAU 3: DEVIS OBLIGATOIRE
        if (heaviestArticle >= 90) {
            triggeredConditions.push(`DEVIS: Article tr√®s lourd (${heaviestArticle}kg ‚â•90kg)`);
        } else if (effectiveFloor >= 3 && !conditions.hasElevator && plantArticleCount >= 40) {
            triggeredConditions.push(`DEVIS: ${effectiveFloor} √©tages + ${plantArticleCount} articles plantes sans ascenseur`);
        } else if (conditions.paletteComplete && conditions.complexAccess) {
            triggeredConditions.push('DEVIS: Palette + acc√®s tr√®s compliqu√©');
        } else if (conditions.multipleLargeVoluminousItems) {
            triggeredConditions.push('DEVIS: Plusieurs gros sujets volumineux');
        } else if ((conditions.estimatedHandlingTime || 0) > 45) {
            triggeredConditions.push(`DEVIS: Manutention longue (${conditions.estimatedHandlingTime}min >45min)`);
        }
        // NIVEAU 2: +2 √âQUIPIERS
        else if (heaviestArticle >= 60) {
            triggeredConditions.push(`2 √©quipiers: Article lourd (${heaviestArticle}kg ‚â•60kg)`);
        } else if (effectiveFloor >= 3 && !conditions.hasElevator && plantArticleCount >= 30) {
            triggeredConditions.push(`2 √©quipiers: ${effectiveFloor} √©tages + ${plantArticleCount} articles plantes sans ascenseur`);
        } else if (conditions.paletteComplete && effectiveFloor > 0) {
            triggeredConditions.push(`2 √©quipiers: Palette + montage en √©tage (${effectiveFloor}√®me)`);
        } else if (conditions.hasLargeVoluminousItems) {
            triggeredConditions.push('2 √©quipiers: Gros sujet volumineux (palmier, etc.)');
        } else if ((conditions.estimatedHandlingTime || 0) >= 30) {
            triggeredConditions.push(`2 √©quipiers: Manutention longue (${conditions.estimatedHandlingTime}min ‚â•30min)`);
        }
        // NIVEAU 1: +1 √âQUIPIER
        else {
            if ((conditions.hasElevator && totalWeight > 300) || (!conditions.hasElevator && totalWeight > 200)) {
                const condition = conditions.hasElevator ? 'avec ascenseur' : 'sans ascenseur';
                triggeredConditions.push(`1 √©quipier: Charge lourde ${totalWeight}kg ${condition}`);
            }
            if (totalItems > 20) triggeredConditions.push(`1 √©quipier: Nombreux articles (${totalItems} >20)`);
            if (conditions.rueInaccessible) triggeredConditions.push('1 √©quipier: Rue inaccessible');
            if (conditions.paletteComplete && effectiveFloor === 0) triggeredConditions.push('1 √©quipier: Palette compl√®te (rez-de-chauss√©e)');
            if ((conditions.parkingDistance || 0) > 50) triggeredConditions.push(`1 √©quipier: Distance portage (${conditions.parkingDistance}m >50m)`);
            if (effectiveFloor > 2 && !conditions.hasElevator) triggeredConditions.push(`1 √©quipier: √âtage √©lev√© (${effectiveFloor}√®me sans ascenseur)`);
            if (conditions.hasStairs && (conditions.stairCount || 0) > 20) triggeredConditions.push(`1 √©quipier: Nombreuses marches (${conditions.stairCount} >20)`);
            if (conditions.needsAssembly) triggeredConditions.push('1 √©quipier: Montage/installation');
        }

        return {
            requiredVehicle: this.recommendVehicle(articles),
            requiredCrew,
            largestArticle,
            heaviestArticle,
            totalWeight,
            totalItems,
            effectiveFloor,
            triggeredConditions,
            needsQuote
        };
    }
}